import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

function Home({ nfts }) {

  const collections = [{
    name: "ðŸ”ºIlluminati NFT",
    slug: "illuminaticollective",
    points: 8,
    perRaffle: 8 / 8,
  },
  {
    name: "ðŸ”ºThe 187",
    slug: "the187",
    points: 16,
    perRaffle: 8 / 16,
  },
  {
    name: "ðŸ”º[REDACTED]",
    slug: "redacted23",
    points: "?",
    perRaffle: 0,
  },
  {
    name: "ðŸ”ºIlluminary",
    slug: "illuminatinft-illuminaries",
    points: 16,
    perRaffle: 8 / 16,
  },
  {
    name: "ðŸ”ºKryptic Kids",
    slug: "kryptic-kids",
    points: 1,
    perRaffle: 8 / 1,
  }]

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Truth Labs raffle ticket calculator
        </h1>

        <h2>Best Price to get a Raffle Ticket</h2>

        <table>
          <thead>
            <tr>
              <th>NFT</th>
              <th>Points</th>
              <th>Floor</th>
              <th>#/Raffle</th>
              <th>Cost/Raffle</th>
            </tr>
          </thead>
          <tbody>
            {collections.map(({ name, points, slug, perRaffle }) => (
              <tr>
                <td>{name}</td>
                <td>{points}</td>
                <td>{nfts[slug].floor_price}</td>
                <td>{perRaffle}</td>
                <td>{nfts[slug].floor_price * perRaffle}</td>
              </tr>
            ))}

          </tbody>
        </table>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps() {
  const collections = [{ slug: "illuminaticollective" }, { slug: "the187" }, { slug: "redacted23" }, { slug: "illuminatinft-illuminaries" }, { slug: "kryptic-kids" }]
  const assets = [{ slug: "inducted", contract_id: "0xbfc5f30e9da14d9506a0ea1eea71e2bf6bb0c3f9", token_id: "1" }]

  const collectionStats = [];
  // await Promise.all(
  //   collections.map(
  //     async ({ slug }) =>
  //       (await (await fetch(`https://api.opensea.io/api/v1/collection/${slug}/stats`)).json()).stats
  //   ))

  const assetsStats = await Promise.all(
    assets.map(
      async ({ contract_id, token_id }) => {

        console.log(`https://api.opensea.io/api/v1/asset/${contract_id}/${token_id}`)
        const res = await fetch(`https://api.opensea.io/api/v1/asset/${contract_id}/${token_id}`);
        console.log("-------", res.status)
        return (await (res)).json().stats
      }
    ))

  const statObject = [...collections, ...assets].reduce((current, { slug }, i) => (
    {
      ...current,
      [slug]: collectionStats[i]
    }
  )
    , {})

  return {
    props: {
      nfts: statObject
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  }
}

export default Home